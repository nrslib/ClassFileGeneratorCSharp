<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    foreach(var usingDefinitions in usings){
#>
<#= usingDefinitions.ToText() #>;
<# } #>
<# if(usings.Any()){ #>

<#}#>
namespace <#= nameSpace #>
{
    public interface <#= interfaceName #>
<# if(implementsSetting.HasAny){ #>
        : <#= implementsSetting.HeadImplement #>
<#   foreach(var elem in implementsSetting.TailImplement) { #>
        , <#= elem #>
<#   } #>
<# } #>    {
<# foreach(var method in methods){ #>
        <#= method.ReturnType #> <#= method.Name #><# if(method.HasAnyGenerics){ #><<#= method.GenericsList #>><# } #>(<#= method.ArgumentsText(formatter) #>)<# if(method.HasAnyGenericsWhere){ #>

<#
   for(var i = 0; i < method.GenericsWheres.Length; i++ ){ 
       var condition = method.GenericsWheres[i];
#>
            where <#= condition #><# if(i < method.GenericsWheres.Length - 1){ #>

<# } #><#   } #><# } #>;
<# } #>    }
}